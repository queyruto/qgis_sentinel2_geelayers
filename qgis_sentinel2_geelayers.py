# -*- coding: utf-8 -*-
"""
/***************************************************************************
 s2layer_factory
                                 A QGIS plugin
 Create Sentinel-2 layers using Google Earth Engine
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-25
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Earth Observation Lab / CNES
        email                : eolab.cnes@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

# QGIS import
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QDate
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import Qgis

# Initialize Qt resources from file resources.py
from .resources import *

# Project
from .palette import palette
from .qgis_sentinel2_geelayers_dialog import s2layer_factoryDialog


class s2layer_factory:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            's2layer_factory_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Sentinel-2 WMS layers')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        # init the proxy for python environment
        self.setProxy()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('s2layer_factory', message)

    def add_action(self, icon_path, text, callback,
                   enabled_flag=True, add_to_menu=True,
                   add_to_toolbar=True, status_tip=None,
                   whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/qgis_sentinel2_geelayers/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'New Sentinel-2 WMS layer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&Sentinel-2 WMS layers'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start is True:
            self.first_start = False
            self.dlg = s2layer_factoryDialog()

            # init cloudy pixels percentage
            def displayPercentage():
                self.dlg.percentageLabel.setText(f"{self.dlg.maxCloudyPixelsSlider.value()}%")

            self.dlg.maxCloudyPixelsSlider.valueChanged.connect(displayPercentage)
            self.dlg.maxCloudyPixelsSlider.setValue(20)

            # init date range slider
            def displayDateRange():
                self.dlg.dayLabel.setText(
                    f"{self.dlg.dateRangeSlider.value()} day(s) after start date")

            self.dlg.dateRangeSlider.valueChanged.connect(displayDateRange)
            self.dlg.dateRangeSlider.setValue(10)

            # init date edit
            self.dlg.startDateEdit.setMinimumDate(QDate(2015, 6, 23))
            self.dlg.startDateEdit.setMaximumDate(QDate.currentDate())
            self.dlg.startDateEdit.setDate(QDate.currentDate().addDays(-15))

            def updateMinDate():
                if self.dlg.collectionComboBox.currentIndex() == 0:
                    self.dlg.startDateEdit.setMinimumDate(QDate(2015, 6, 23))
                else:
                    self.dlg.startDateEdit.setMinimumDate(QDate(2017, 3, 28))

            self.dlg.collectionComboBox.currentIndexChanged.connect(updateMinDate)

            # init display type
            def displayConf():
                self.dlg.stackedWidget.setCurrentIndex(self.dlg.displayComboBox.currentIndex())

            self.dlg.displayComboBox.currentIndexChanged.connect(displayConf)

            # init palette combobox
            self.dlg.paletteComboBox.addItems(list(palette.keys()))

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # create the GEE WMS layer
            self.addGeeLayer()

    def setProxy(self):
        # procedure to set proxy if needed
        s = QSettings()
        proxyEnabled = s.value("proxy/proxyEnabled", "")
        proxyHost = s.value("proxy/proxyHost", "")
        proxyPort = s.value("proxy/proxyPort", "")
        proxyUser = s.value("proxy/proxyUser", "")
        proxyPassword = s.value("proxy/proxyPassword", "")

        if proxyEnabled == "true":
            # from qgis.PyQt.QtNetwork import QNetworkProxy
            # proxy = QNetworkProxy()
            # proxyType = s.value("proxy/proxyType", "")
            # if proxyType == "DefaultProxy":
            #     proxy.setType(QNetworkProxy.DefaultProxy)
            # elif proxyType == "Socks5Proxy":
            #     proxy.setType(QNetworkProxy.Socks5Proxy)
            # elif proxyType == "HttpProxy":
            #     proxy.setType(QNetworkProxy.HttpProxy)
            # elif proxyType == "HttpCachingProxy":
            #     proxy.setType(QNetworkProxy.HttpCachingProxy)
            # elif proxyType == "FtpCachingProxy":
            #     proxy.setType(QNetworkProxy.FtpCachingProxy)
            # proxy.setHostName(proxyHost)
            # proxy.setPort(int(proxyPort))
            # proxy.setUser(proxyUser)
            # proxy.setPassword(proxyPassword)
            # QNetworkProxy.setApplicationProxy(proxy)
            import os
            proxy_setup = f"https://{proxyUser}:{proxyPassword}@{proxyHost}:{proxyPort}"
            os.environ["http_proxy"] = proxy_setup
            os.environ["https_proxy"] = proxy_setup
            os.environ["HTTP_PROXY"] = proxy_setup
            os.environ["HTTPS_PROXY"] = proxy_setup

    def addGeeLayer(self):
        """Create the Google Earth Engine WMS layer following the configuration setup in the GUI
        """

        # Import GEE inside method to avoid internet connection at plugin startup
        import ee
        from ee_plugin import Map

        # 1. Connect to Google Earth Engine server
        # ----------------------------------------
        self.iface.statusBarIface().showMessage("Connecting to GEE server...")
        try:
            ee.Initialize()
            self.iface.statusBarIface().showMessage("Connection Succeeded!")
        except Exception:
            self.iface.messageBar().pushMessage(
                "Failed to connect to GEE server...",
                "Please connect to GEE in an interactive python session following "
                "instruction given in plugin's doc",
                Qgis.Critical)
            self.iface.statusBarIface().showMessage(
                "Failed. Please connect to GEE in an interactive python session following "
                "instruction given in plugin's doc")
            return

        # 2. Create the GEE map
        # ---------------------
        if self.dlg.collectionComboBox.currentIndex() == 0:
            collectionName = "COPERNICUS/S2"
        else:
            collectionName = "COPERNICUS/S2_SR"
        displayName = 'S2_L1C' if self.dlg.collectionComboBox.currentIndex() == 0 else 'S2_L2A'
        startDate = self.dlg.startDateEdit.date()
        startDateStr = startDate.toString("yyyy-MM-dd")
        endDate = startDate.addDays(self.dlg.dateRangeSlider.value())
        endDateStr = endDate.toString("yyyy-MM-dd")

        # create the collection and filter by date
        collection = ee.ImageCollection(collectionName).filterDate(startDateStr, endDateStr)

        collection = collection.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',
                                                    int(self.dlg.maxCloudyPixelsSlider.value())))
        if self.dlg.filterCloudsCheckBox.isChecked():
            collection = collection.map(maskS2clouds)
        collection = collection.map(normalizeS2)

        # set visualisation conf
        visualization = {}
        if self.dlg.displayComboBox.currentIndex() == 0:
            # configure map visualisation
            bands = [self.dlg.singleBandComboBox.currentText()]
            visualization = {
                "min": self.dlg.singleBandMinSpinBox.value(),
                "max": self.dlg.singleBandMaxSpinBox.value(),
                "bands": bands
            }
        elif self.dlg.displayComboBox.currentIndex() == 1:
            # configure map visualisation
            bands = [self.dlg.redComboBox.currentText(),
                     self.dlg.greenComboBox.currentText(),
                     self.dlg.blueComboBox.currentText()]
            visualization = {
                "min": self.dlg.minSpinBox.value(),
                "max": self.dlg.maxSpinBox.value(),
                "bands": bands
            }
        else:
            ndBands = [self.dlg.ndBand1ComboBox.currentText(),
                       self.dlg.ndBand2ComboBox.currentText()]
            ndName = "-".join(ndBands)
            visualization = {
                "min": self.dlg.ndMinSpinBox.value(),
                "max": self.dlg.ndMaxSpinBox.value(),
                "bands": [ndName],
                "palette": palette[self.dlg.paletteComboBox.currentText()]["5"]
            }

            # compute the band with the normalized difference
            def addNdBand(image):
                nd = image.normalizedDifference(ndBands).rename(ndName)
                return image.addBands(nd)

            collection = collection.map(addNdBand)
            bands = [f"nd({','.join(ndBands)})"]

        # apply the desired composition
        if self.dlg.compositionComboBox.currentIndex() == 0:
            image = collection.mosaic()
            compositionName = "mosaic"
        elif self.dlg.compositionComboBox.currentIndex() == 1:
            image = collection.mean()
            compositionName = "mean"
        else:
            image = collection.median()
            compositionName = "median"

        # get the GEE map url
        eeObject = ee.Image(image)
        layerName = f'{displayName} {compositionName} [{", ".join(bands)}] ({startDateStr} - {endDateStr})'

        # 3. Create the QGis raster layer
        # -------------------------------
        Map.addLayer(eeObject, visualization, layerName, True)


def maskS2clouds(image):
    """Utility method to mask cloudy pixels in a S2 image
    """
    qa = image.select('QA60')

    # Bits 10 and 11 are clouds and cirrus, respectively.
    cloudBitMask = 1 << 10
    cirrusBitMask = 1 << 11

    # Both flags should be set to zero, indicating clear conditions.
    mask = qa.bitwiseAnd(cloudBitMask).eq(0).And(qa.bitwiseAnd(cirrusBitMask).eq(0))

    return image.updateMask(mask)


def normalizeS2(image):
    """Utility method to normalize pixels values in a S2 image
    """
    return image.divide(10000).select("B.*").copyProperties(image, ["system:time_start"])
